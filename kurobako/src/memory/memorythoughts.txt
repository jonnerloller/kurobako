Just a file for me to conceptualize and leave memos.

Static memory :things whose lifespan in game should last forever
configs, renderer, top level managers, things which are generally singletons,
should be known as static memory. [altho memory is still allocated]

dynamic memory: things that come to life during the game. like when levels are loaded.

heap memory: I forsee us not really using a lot of these, because i think for the scale of our game engine
we should be able to fit everything into reserved memory. But generally things that have to be created / freed
at runtime. In terms of game flow, particle systems.

pool memory: to reduce the usage of heap memory. if the user wishes to allocate much of the same type.

How i forsee each of these memory types.

MemoryStack
  + Simples form of Memory.
  + Easy to implement [ like function stack]
  - Requires deleting in order / not caring about destruction[concurrent free]

Every form of memory management will be built off MemoryStack

MemoryPool<T>
  + Is essentially a MemoryStack, but is able to dish out elements of a generic type T
  - Usually means having to over-reserve memory 

MemoryHeap
  - A very very crappy implementation of memorystack that keeps track of what slots have been allocated to what sizes
  - No defragmentation will be done, but basically keeps tracks of what blocks have been allocated
  - Once a block has been allocated, it remains tagged to that size until the heap has been destroyed

  Heap can only be used by specific predefined sizes.
  Used for allocation of singular objects. [no arrays, SOA if you need to, MemoryPool if you need to]
  new int new MyStruct
  Generally used for things outside of our control.